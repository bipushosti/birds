Attribute VB_Name = "ModCircStats"Option ExplicitPublic Function CircMeanConcentration(ValArray() As Double, ByRef CircMean As Double) As Double'Batschelet 1981, pg.7-18'returns directional concentration = r = mean vector length'and CircMean = mean angle of sample'CircMean (mean angle) is returned as proper flight direction (not in radians)'RandNumbs in ValArray() are in radians  Dim SumX As Double  Dim SumY As Double  Dim X As Double  Dim Y As Double  Dim Alpha As Double  Dim VectorLength As Double  Dim I As Long  Dim MeanAngle As Double  Dim Number As Double       SumX = 0  SumY = 0  Number = 0  Number = UBound(ValArray())  For I = 1 To Number    Alpha = ValArray(I)    X = Cos(Alpha)    Y = Sin(Alpha)    SumX = SumX + X    SumY = SumY + Y  Next I  If Number > 0 Then    SumX = SumX / Number    SumY = SumY / Number  Else    SumX = 0    SumY = 0  End If  VectorLength = Sqr(SumY ^ 2 + SumX ^ 2)  If SumX > 0 Then                                          'Batschelet 1981, pg.11    MeanAngle = Atn(SumY / SumX)  Else    If SumX = 0 Then      MeanAngle = 0    Else                                                    'SumX < 0      MeanAngle = AsRadians(180) + Atn(SumY / SumX)    End If  End If  MeanAngle = AsDegrees(MeanAngle)    CircMeanConcentration = VectorLength  CircMean = MeanAngle  End FunctionPublic Function WrappedNormal(ByVal MeanAngle As Double, ByVal AngStdDev As Double) As Double'Fisher 1993 pg. 47-48'sï¿½ = -2.ln(r)  Dim U1 As Double  Dim U2 As Double  Dim X As Double  Dim Z As Double  Dim Y As Double  Dim WN As Double    Do    Do      U1 = Rnd      U2 = Rnd    Loop Until U1 > 0 And U2 > 0        Z = 1.715528 * (U1 - 0.5) / U2    X = 0.25 * Z ^ 2    If X - (1 - U2) < glCompAcc Then      Exit Do    End If    If X - (-Log(U2)) < glCompAcc Then      Exit Do    End If  Loop      Y = AngStdDev * Z + MeanAngle  If Y - 360 > -glCompAcc Then    Y = Y - 360  End If  If Y < 0 Then    Y = 360 + Y  End If  WrappedNormal = Y  End FunctionPublic Function AsAngularDeviation(Conc As Double) As Double'converts the concentration parameter (r = mean vector length) from the angular deviation'angular deviation is returned as degrees'Batschelet 1981  Dim AngDev As Double    AngDev = 2 * (1 - Conc)  AngDev = Sqr(AngDev)    AsAngularDeviation = AsDegrees(AngDev)  End FunctionPublic Function AsConcentration(AngDev As Double) As Double'converts angular deviation to concentration parameter (r = mean vector length)'Batschelet 1981'returns concentration parameter'AngDev in degrees    Dim R As Double  Dim S As Double    S = AsRadians(AngDev)  R = 1 - (S ^ 2) / 2    AsConcentration = R  End Function